<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mariojump</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Initialise Variables
grav = 0.4;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed = 2;

//mario power up 0=Mario 1=SuperMario 2=CurryMario
mariopowerup = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R')))
    game_restart();

if (global.paused == true){
    image_speed = 0;
    exit;
}
if (mariopowerup = -1){
    sprite_index = spr_mariodie;
    global.paused = true;
}    

//////////Get the players input
key_right = keyboard_check(vk_right);
key_left = - keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(ord('Z'));
key_jump_held = keyboard_check(ord('Z'));
key_run = keyboard_check(ord('X'));
    
//////////change mask depending on power up
if (mariopowerup == 0)
    mask_index = spr_mario;
else
    mask_index = spr_smarioidle;
//////////React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

//Jump
if (place_meeting(x,y+1,obj_brick))
{
    vsp = key_jump * -jumpspeed;
}
if (vsp &lt; 0) &amp;&amp; (!key_jump_held)
    vsp = max(vsp,-jumpspeed/2)
//run
if (key_run)
    movespeed = 4;
else
    movespeed = 2;
//////////Horizontal Collision
if (place_meeting(x+hsp,y,obj_brick))
{
    while (!place_meeting(x+sign(hsp),y,obj_brick))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//////////Vertical Collision
if (place_meeting(x,y+vsp,obj_brick))
{
    while (!place_meeting(x,y+sign(vsp),obj_brick))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//////////View controls
//moves camera right
if (obj_mario.x &gt; view_xview + 240)
{
    view_xview = obj_mario.x - 240;
}
//cant go back
if (obj_mario.x &lt; view_xview + 16)
    obj_mario.x = view_xview + 16;
    
//////////Animate
//flips sprite depending on direction
if (move != 0)
    image_xscale = move;

//running
if (place_meeting(x,y+1,obj_brick))
{
    if (move != 0) 
    {
        if (mariopowerup == 0)
            sprite_index = spr_mariorun;
        else if (mariopowerup == 1)
            sprite_index = spr_smariorun;
        if (key_run)
        {
            image_speed = 0.4;
        }
        else
        {
            image_speed = 0.2;
        }
    }
    else
    {
        if (mariopowerup == 0)
            sprite_index = spr_mario;
        else if (mariopowerup == 1)
            sprite_index = spr_smarioidle;
    }
}
else
{
        if (mariopowerup == 0)
            sprite_index = spr_mariojump;
        else if (mariopowerup == 1)
            sprite_index = spr_smariojump;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
